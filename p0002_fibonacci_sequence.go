package main

import "github.com/doozr/euler.go/euler/math"

/*
Each new term in the Fibonacci sequence is generated by adding the previous two terms.
By starting with 0 and 1, the first 10 terms will be:

    0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...

By considering the terms in the Fibonacci sequence whose values do not exceed four million,
find the sum of the even-valued terms.


Answer:
    4613732
*/

// SumFibEvens calculates the sum of even numbers in the Fibonacci sequence up to limit
func SumFibEvens(limit int) int {
	ch := make(chan int)
	total := 0
	go math.Fib(ch)
	for next := <-ch; next < limit; next = <-ch {
		if next%2 == 0 {
			total += next
		}
	}
	return total
}

// Problem0002FibonacciSequence calculates the sum of even numbers in the Fibonacci sequence up to 4000000
func Problem0002FibonacciSequence() (int, error) {
	total := SumFibEvens(4000000)
	expected := 4613732
	if total != expected {
		return total, EulerError{expected, total}
	}
	return total, nil
}
